/* WATTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. WATTokenManager.java */
package io.github.eutro.jwasm.sexp.gen;
import io.github.eutro.jwasm.Limits;
import io.github.eutro.jwasm.Opcodes;
import io.github.eutro.jwasm.tree.*;
import io.github.eutro.jwasm.ByteList;
import io.github.eutro.jwasm.sexp.Script;
import java.util.*;

/** Token Manager. */
@SuppressWarnings("unused")public class WATTokenManager implements WATConstants {
  // I <3 Java
  private static RuntimeException rethrowUnchecked(Throwable t) {
    rethrowGeneric(t);
    return null;
  }

  @SuppressWarnings("unchecked")
  private static <T extends Throwable> void rethrowGeneric(Throwable t) throws T {
    throw (T) t;
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x60000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 41:
         return jjStopAtPos(0, 35);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x18c000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x60000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x18400000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000000L);
      case 54:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000000L);
      case 59:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40c000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 31);
         break;
      case 52:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 32);
         break;
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 34);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 99:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1a000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1a000000000L);
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(4, 36);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10008000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 27);
         break;
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(12, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 104;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     { jjCheckNAddStates(0, 5); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjAddStates(6, 14); }
                  else if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 36)
                     { jjCheckNAdd(17); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(15, 18); }
                  if (curChar == 48)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(22, 23); }
                  break;
               case 11:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 16:
                  if (curChar == 36)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0xf7ffec7e00000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAdd(17); }
                  break;
               case 18:
                  if (curChar == 61)
                     { jjAddStates(24, 25); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 31:
                  if (curChar == 61)
                     { jjAddStates(26, 27); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 43:
                  if (curChar != 59)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAdd(44); }
                  break;
               case 44:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAdd(44); }
                  break;
               case 45:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 49:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 53:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(0, 5); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(57); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(59, 61); }
                  break;
               case 61:
                  if (curChar != 46)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 66:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(67, 69); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 70:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 73:
                  if (curChar == 48)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(31, 32); }
                  break;
               case 80:
                  if (curChar != 46)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(33, 35); }
                  break;
               case 86:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(87, 89); }
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(88, 89); }
                  break;
               case 90:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 93:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(6, 14); }
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 99:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 100:
                  if (curChar == 48)
                     { jjCheckNAdd(77); }
                  break;
               case 101:
                  if (curChar == 48)
                     { jjCheckNAdd(83); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 110)
                     { jjCheckNAddTwoStates(48, 55); }
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (curChar == 102 && kind > 14)
                     kind = 14;
                  break;
               case 1:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 5:
                  if (curChar == 123)
                     { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(22, 23); }
                  break;
               case 7:
                  if (curChar == 95)
                     { jjCheckNAdd(6); }
                  break;
               case 8:
                  if (curChar == 125)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 9:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 10:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 92)
                     { jjAddStates(36, 37); }
                  break;
               case 13:
                  if ((0x14400010000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 17:
                  if ((0x57ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 120)
                     { jjCheckNAdd(22); }
                  break;
               case 22:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if (curChar == 95)
                     { jjCheckNAdd(22); }
                  break;
               case 25:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 33:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 120)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if (curChar == 95)
                     { jjCheckNAdd(35); }
                  break;
               case 38:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 39:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  if (kind > 24)
                     kind = 24;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 110)
                     { jjCheckNAddTwoStates(48, 55); }
                  break;
               case 47:
                  if (curChar == 110 && kind > 14)
                     kind = 14;
                  break;
               case 48:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar == 120)
                     { jjCheckNAdd(51); }
                  break;
               case 51:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if (curChar == 95)
                     { jjCheckNAdd(51); }
                  break;
               case 54:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 55:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 59:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 63:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 72:
                  if (curChar == 95)
                     { jjCheckNAdd(71); }
                  break;
               case 74:
                  if (curChar == 120)
                     { jjCheckNAdd(75); }
                  break;
               case 75:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if (curChar == 95)
                     { jjCheckNAdd(75); }
                  break;
               case 77:
                  if (curChar == 120)
                     { jjCheckNAdd(78); }
                  break;
               case 78:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(31, 32); }
                  break;
               case 79:
                  if (curChar == 95)
                     { jjCheckNAdd(78); }
                  break;
               case 81:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 120)
                     { jjCheckNAdd(84); }
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(33, 35); }
                  break;
               case 85:
                  if (curChar == 95)
                     { jjCheckNAdd(84); }
                  break;
               case 87:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(88, 89); }
                  break;
               case 88:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAddTwoStates(90, 91); }
                  break;
               case 92:
                  if (curChar == 95)
                     { jjCheckNAdd(91); }
                  break;
               case 95:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 120)
                     { jjCheckNAdd(97); }
                  break;
               case 97:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if (curChar == 95)
                     { jjCheckNAdd(97); }
                  break;
               case 102:
                  if (curChar == 110)
                     { jjCheckNAdd(48); }
                  break;
               case 103:
                  if (curChar == 110)
                     { jjCheckNAdd(55); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 44:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 104 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   57, 59, 61, 64, 66, 69, 94, 99, 60, 65, 100, 101, 2, 102, 103, 4, 
   10, 11, 12, 74, 77, 83, 7, 8, 19, 24, 32, 37, 64, 66, 69, 79, 
   80, 85, 86, 89, 13, 14, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\146\165\156\143", "\146\165\156\143\162\145\146", "\145\170\164\145\162\156\162\145\146", 
"\151\63\62", "\151\66\64", "\146\63\62", "\146\66\64", "\50", "\155\165\164", "\51", 
"\160\141\162\141\155", "\162\145\163\165\154\164", "\164\171\160\145", "\155\157\144\165\154\145", 
"\155\157\144\165\154\145\137\146\151\145\154\144\163", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 25 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  int depth = 1;
  try {
    while (depth > 0) {
      char c = input_stream.readChar();
      if (c == '(' && input_stream.readChar() == ';') {
        depth++;
      } else if (c == ';' && input_stream.readChar() == ')') {
        depth--;
      }
    }
  } catch (java.io.IOException e) {
    throw rethrowUnchecked(e); // <3
  }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public WATTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public WATTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 104; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1fffc1ccc01L, 
};
static final long[] jjtoSkip = {
   0x3e00000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[104];
    private final int[] jjstateSet = new int[2 * 104];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected int curChar;
}
