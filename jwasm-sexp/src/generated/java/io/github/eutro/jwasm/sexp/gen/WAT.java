/* WAT.java */
/* Generated By:JavaCC: Do not edit this line. WAT.java */
package io.github.eutro.jwasm.sexp.gen;

import io.github.eutro.jwasm.Limits;
import io.github.eutro.jwasm.Opcodes;
import io.github.eutro.jwasm.tree.*;
import io.github.eutro.jwasm.ByteList;
import io.github.eutro.jwasm.sexp.Script;
import java.util.*;

public class WAT implements WATConstants {

  final private String name() throws ParseException {Token s;
    s = jj_consume_token(STRING);
{if ("" != null) return s.toString();}
    throw new Error("Missing return statement in function");
  }

  final private String stringList(StringBuilder sb) throws ParseException {Token t;
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      t = jj_consume_token(STRING);
sb.append(t);
    }
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final private byte refKind() throws ParseException {
    jj_consume_token(26);
{if ("" != null) return Opcodes.REF_FUNC;}
    throw new Error("Missing return statement in function");
  }

  final private byte refType() throws ParseException {
    if (jj_2_2(2)) {
      jj_consume_token(27);
{if ("" != null) return Opcodes.FUNCREF;}
    } else if (jj_2_3(2)) {
      jj_consume_token(28);
{if ("" != null) return Opcodes.EXTERNREF;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private byte numType() throws ParseException {
    if (jj_2_4(2)) {
      jj_consume_token(29);
{if ("" != null) return Opcodes.I32;}
    } else if (jj_2_5(2)) {
      jj_consume_token(30);
{if ("" != null) return Opcodes.I64;}
    } else if (jj_2_6(2)) {
      jj_consume_token(31);
{if ("" != null) return Opcodes.F32;}
    } else if (jj_2_7(2)) {
      jj_consume_token(32);
{if ("" != null) return Opcodes.F64;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private byte valueType() throws ParseException {byte ty;
    if (jj_2_8(2)) {
      ty = numType();
{if ("" != null) return ty;}
    } else if (jj_2_9(2)) {
      ty = refType();
{if ("" != null) return ty;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private List<Byte> valueTypeList(List<Byte> l) throws ParseException {byte ty;
    label_2:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_2;
      }
      ty = valueType();
l.add(ty);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final private GlobalTypeNode globalType() throws ParseException {byte ty;
    if (jj_2_11(2)) {
      ty = valueType();
{if ("" != null) return new GlobalTypeNode(Opcodes.MUT_CONST, ty);}
    } else if (jj_2_12(2)) {
      jj_consume_token(33);
      jj_consume_token(34);
      ty = valueType();
      jj_consume_token(35);
{if ("" != null) return new GlobalTypeNode(Opcodes.MUT_VAR, ty);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private TypeNode defType() throws ParseException {TypeNode ty;
    jj_consume_token(33);
    jj_consume_token(26);
    ty = funcType();
    jj_consume_token(35);
{if ("" != null) return ty;}
    throw new Error("Missing return statement in function");
  }

  final private byte[] unwrapBytes(List<Byte> bs) throws ParseException {
byte[] rbs = new byte[bs.size()]; int i = 0; for (byte b : bs) rbs[i++] = b; {if ("" != null) return rbs;}
    throw new Error("Missing return statement in function");
  }

  final private void funcType1(List<Byte> params, List<Byte> rets) throws ParseException {byte ty;
    label_3:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(33);
      jj_consume_token(36);
      valueTypeList(params);
      jj_consume_token(35);
    }
    funcTypeResult(rets);
  }

  final private TypeNode funcType() throws ParseException {List<Byte> params = new ArrayList<Byte>(), rets = new ArrayList<Byte>();
    funcType1(params, rets);
{if ("" != null) return new TypeNode(unwrapBytes(params), unwrapBytes(rets));}
    throw new Error("Missing return statement in function");
  }

  final private List<Byte> funcTypeResult(List<Byte> bs) throws ParseException {
    label_4:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(33);
      jj_consume_token(37);
      valueTypeList(bs);
      jj_consume_token(35);
    }
{if ("" != null) return bs;}
    throw new Error("Missing return statement in function");
  }

  final private TableNode tableType() throws ParseException {Limits ls; byte ty;
    ls = limits();
    ty = refType();
{if ("" != null) return new TableNode(ls, ty);}
    throw new Error("Missing return statement in function");
  }

  final private MemoryNode memType() throws ParseException {Limits ls;
    ls = limits();
{if ("" != null) return new MemoryNode(ls);}
    throw new Error("Missing return statement in function");
  }

  final private int nat32(String s) throws ParseException {
if (s.startsWith("0x")) { {if ("" != null) return Integer.parseInt(s.substring(2), 16);} }
    else { {if ("" != null) return Integer.parseInt(s);} }
    throw new Error("Missing return statement in function");
  }

  final private int int32(String s) throws ParseException {
int n = nat32(s.substring(1)); {if ("" != null) return s.startsWith("-") ? -n : n;}
    throw new Error("Missing return statement in function");
  }

  final private Limits limits() throws ParseException {Token min, max = null;
    min = jj_consume_token(NAT);
    if (jj_2_15(2)) {
      max = jj_consume_token(NAT);
    } else {
      ;
    }
new Limits(nat32(min.image), max == null ? null : nat32(max.image));
  }

  final private TypeNode typeUse() throws ParseException {TypeNode ty;
    jj_consume_token(33);
    jj_consume_token(38);
    ty = var();
    jj_consume_token(35);
{if ("" != null) return ty;}
    throw new Error("Missing return statement in function");
  }

  final private Number num() throws ParseException {Token t;
    if (jj_2_16(2)) {
      t = jj_consume_token(NAT);
{if ("" != null) return nat32(t.image);}
    } else if (jj_2_17(2)) {
      t = jj_consume_token(INT);
{if ("" != null) return int32(t.image);}
    } else if (jj_2_18(2)) {
      t = jj_consume_token(FLOAT);
{if (true) throw new RuntimeException("TODO");}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private List<Number> numList(List<Number> ls) throws ParseException {Number n;
    label_5:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_5;
      }
      n = num();
ls.add(n);
    }
{if ("" != null) return ls;}
    throw new Error("Missing return statement in function");
  }

  final private TypeNode var() throws ParseException {Token t;
    t = jj_consume_token(NAT);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ModuleNode module_() throws ParseException {
    jj_consume_token(33);
    jj_consume_token(39);
    jj_consume_token(35);
    jj_consume_token(0);
{if ("" != null) return new ModuleNode();}
    throw new Error("Missing return statement in function");
  }

  final public ModuleNode inlineModule() throws ParseException {
    jj_consume_token(40);
    jj_consume_token(0);
{if ("" != null) return new ModuleNode();}
    throw new Error("Missing return statement in function");
  }

  final public ModuleNode module1() throws ParseException {ModuleNode m;
    if (jj_2_20(2)) {
      m = module_();
      jj_consume_token(0);
{if ("" != null) return m;}
    } else if (jj_2_21(2)) {
      m = inlineModule();
      jj_consume_token(0);
{if ("" != null) return m;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Script.Command action() throws ParseException {
    jj_consume_token(0);
  }

  final private Script.Command cmd() throws ParseException {Script.Command cmd;
    action();
  }

  final private void cmdList(Script s) throws ParseException {Script.Command c;
    label_6:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_6;
      }
      c = cmd();
s.commands.add(c);
    }
  }

  final public Script script1() throws ParseException {Script s = new Script();
    jj_consume_token(0);
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Script script() throws ParseException {Script s = new Script(); ModuleNode m;
    m = inlineModule();
s.commands.add(new Script.Command.Module(m)); {if ("" != null) return s;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_3_19()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(NAT)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(NAT)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(29)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(40)) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(36)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public WATTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[22];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public WAT(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WAT(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new WATTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public WAT(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WATTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new WATTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public WAT(WATTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(WATTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 22; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
              case 11: jj_3_12(); break;
              case 12: jj_3_13(); break;
              case 13: jj_3_14(); break;
              case 14: jj_3_15(); break;
              case 15: jj_3_16(); break;
              case 16: jj_3_17(); break;
              case 17: jj_3_18(); break;
              case 18: jj_3_19(); break;
              case 19: jj_3_20(); break;
              case 20: jj_3_21(); break;
              case 21: jj_3_22(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
